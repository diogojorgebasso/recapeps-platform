'use client';

import {
  Box,
  Button,
  Flex,
  Progress,
  Text,
  VStack,
  Heading,
} from '@chakra-ui/react';
import React, { useState } from 'react';

const questions = [
  {
    question: "En EPS on retrouve ‚Ä¶ comp√©tences travaill√©es en continuit√© sur les diff√©rents cycles ",
    options: [
      "3", "5", "7", "9"
    ],
    correctAnswer: "5",
  },
  {
    question: "Comment le S4C (2015) d√©finit-il une comp√©tence ?",
    options: ["L‚Äôaptitude √† mobiliser ses ressources pour accomplir une t√¢che ou faire face √† une situation complexe ou in√©dite", "Une action reproductible dans toutes les situations ", "Une capacit√© sp√©cifique √† une discipline donn√©e", "Une qualit√© qui ne se d√©veloppe que par la r√©p√©tition "],
    correctAnswer: "L‚Äôaptitude √† mobiliser ses ressources pour accomplir une t√¢che ou faire face √† une situation complexe ou in√©dite",
  },
  {
    question: "En quoi consiste une comp√©tence sociale en EPS?",
    options: ["Jouer individuellement et interagir avec les autres", "Ex√©cuter les consignes sans r√©fl√©chir", "Partager des r√®gles, assumer des r√¥les et des responsabilit√©s ", "Se concentrer sur sa propre performance"],
    correctAnswer: "Partager des r√®gles, assumer des r√¥les et des responsabilit√©s",
  },
  {
    question: "Quels sont les trois types de comp√©tences abord√©es en EPS ?",
    options: [
      "Physiques, techniques et th√©oriques",
      "Personnelles, scolaires et sportives ",
      "Rapides, lentes et moyennes",
      "Motrices, m√©thodologiques et sociales",
    ],
    correctAnswer: "Motrices, m√©thodologiques et sociales",
  },
  {
    question: "Quelle est la premi√®re comp√©tence travaill√©e en EPS selon le BO 2015 ?",
    options: [
      "D√©velopper sa motricit√© et construire un langage du corps",
      "Apprendre les r√®gles de tous les sports",
      "Se sp√©cialiser dans une discipline",
      "D√©velopper uniquement l‚Äôendurance",
    ],
    correctAnswer: "D√©velopper sa motricit√© et construire un langage du corps",
  },
];

export default function QuizComponent2() {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [selectedOption, setSelectedOption] = useState<string | null>(null);
  const [score, setScore] = useState(0);
  const [showAnswer, setShowAnswer] = useState(false);
  const [isFinished, setIsFinished] = useState(false);

  const question = questions[currentQuestion];
  const isCorrect = selectedOption === question.correctAnswer;
  const progress = (currentQuestion / questions.length) * 100;

  const handleOptionClick = (option: string) => {
    if (!showAnswer) {
      setSelectedOption(option);
    }
  };

  const handleValidation = () => {
    if (selectedOption === question.correctAnswer) {
      setScore((prev) => prev + 1);
    }
    setShowAnswer(true);
  };

  const handleNext = () => {
    if (currentQuestion + 1 < questions.length) {
      setCurrentQuestion((prev) => prev + 1);
      setSelectedOption(null);
      setShowAnswer(false);
    } else {
      setIsFinished(true);
    }
  };

  if (isFinished) {
    return (
      <Box
        textAlign="center"
        p={6}

        rounded="xl"
        shadow="md"
        w={{ base: "90%", md: "600px" }}
        padding={4}
      >
        <Heading size="lg" mb={4}>Quiz termin√© !</Heading>
        <Text fontSize="xl" fontWeight="semibold" mb={4}>
          Votre score : <Text as="span" fontWeight="bold">{score} / {questions.length}</Text>
        </Text>
        <Text mb={8}>
          Si tu souhaites acc√©der √† plus de contenu et enregistrer ta progression, tu peux cr√©er un compte juste ici üòé
        </Text>
        <Button colorPalette="blue" onClick={() => window.location.href = '/quiz'}>
          Cr√©er un compte
        </Button>
      </Box>
    );
  }

  return (
    <Box w={{ base: "90%", md: "600px" }}
      mx="auto"
      p={4}
      overflow="hidden">
      <Flex justify="space-between" mb={2}>
        <Text fontSize="sm" color="gray.500">
          Niveau : {1}
        </Text>
      </Flex>

      <Heading as="h2" size="md" mb={4}>
        <Box maxW="100%" >
          <Text whiteSpace="normal"
            wordBreak="break-word"
            overflowWrap="break-word"
            fontSize={"lg"} >
            {question.question}
          </Text>
        </Box>
      </Heading>

      <VStack gap={3} align="stretch">
        {question.options.map((option) => {
          let bg = 'gray.800';
          if (showAnswer) {
            if (option === question.correctAnswer) {
              bg = 'green.500';
            } else if (option === selectedOption) {
              bg = 'red.500';
            }
          } else if (option === selectedOption) {
            bg = 'blue.500';
          }

          return (
            <Button
              key={option}
              onClick={() => handleOptionClick(option)}
              bg={bg}
              color="white"
              _hover={{ bg }}
              disabled={showAnswer}
              py={6}
              borderRadius="md"
              fontSize="md"
              fontWeight="medium"
            >
              <Text whiteSpace="normal"
                wordBreak="break-word"
                overflowWrap="break-word"> {option}</Text>
            </Button>
          );
        })}
      </VStack>

      <Box mt={6}>
        <Flex justify="space-between" fontSize="xs" mb={1}>
        </Flex>
        <Progress.Root value={progress} size="sm" colorPalette="blue" borderRadius="md" >
          <Progress.Track>
            <Progress.Range />
          </Progress.Track>
          <Progress.ValueText />
        </Progress.Root>
      </Box>

      <Button
        mt={6}
        colorPalette={showAnswer ? 'green' : 'blue'}
        width="100%"
        onClick={showAnswer ? handleNext : handleValidation}
        disabled={!selectedOption && !showAnswer}
      >
        {showAnswer ? 'Suivant' : 'Valider'}
      </Button>
    </Box>
  );
};

